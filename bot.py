import os
import psycopg2
from psycopg2 import IntegrityError
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler,
    MessageHandler, filters, ContextTypes
)

BOT_TOKEN = "–¢–û–ö–ï–ù_–ë–û–¢–ê"
ADMIN_ID = 472044641  

DATABASE_URL = os.environ.get("DATABASE_URL")
if not DATABASE_URL:
    raise ValueError("DATABASE_URL –Ω–µ –∑–∞–¥–∞–Ω! –ü—Ä–æ–≤–µ—Ä—å Railway.")

# ================= –§–£–ù–ö–¶–ò–ò –†–ê–ë–û–¢–´ –° –ë–î =================
def execute_query(query, params=None, fetch=False):
    conn = psycopg2.connect(DATABASE_URL, sslmode="require")
    cursor = conn.cursor()
    cursor.execute(query, params or ())
    result = cursor.fetchall() if fetch else None
    conn.commit()
    cursor.close()
    conn.close()
    return result

def init_db():
    execute_query("""
    CREATE TABLE IF NOT EXISTS products(
        id SERIAL PRIMARY KEY,
        name TEXT UNIQUE NOT NULL
    )""")
    execute_query("""
    CREATE TABLE IF NOT EXISTS orders(
        id SERIAL PRIMARY KEY,
        user_id TEXT,
        username TEXT,
        product TEXT,
        phone TEXT
    )""")
    execute_query("""
    CREATE TABLE IF NOT EXISTS settings(
        key TEXT PRIMARY KEY,
        value TEXT
    )""")

def get_products():
    rows = execute_query("SELECT name FROM products ORDER BY id ASC", fetch=True)
    return [row[0] for row in rows]

def get_media():
    row = execute_query("SELECT value FROM settings WHERE key='media_file'", fetch=True)
    return row[0] if row else None

def set_media(file_id):
    execute_query("""
    INSERT INTO settings(key, value)
    VALUES ('media_file', %s)
    ON CONFLICT (key) DO UPDATE SET value = EXCLUDED.value
    """, (file_id,))

# ================= –ö–õ–ò–ï–ù–¢–°–ö–ê–Ø –ß–ê–°–¢–¨ =================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    products = get_products()
    if not products:
        await update.message.reply_text("–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø—É—Å—Ç. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –µ–≥–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å.")
        return

    media_id = get_media()
    if media_id:
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ –ø–æ user_data["media_type"]
        media_type_row = execute_query("SELECT value FROM settings WHERE key='media_type'", fetch=True)
        media_type = media_type_row[0] if media_type_row else "photo"

        if media_type == "video":
            await update.message.reply_video(video=media_id, caption="üé• –ù–∞—à–∏ —Ç–æ–≤–∞—Ä—ã")
        elif media_type == "animation":
            await update.message.reply_animation(animation=media_id, caption="üéû –ù–∞—à–∏ —Ç–æ–≤–∞—Ä—ã")
        else:
            await update.message.reply_photo(photo=media_id, caption="üõç –ù–∞—à–∏ —Ç–æ–≤–∞—Ä—ã")

    keyboard = [[InlineKeyboardButton(p, callback_data=f"product_{p}")] for p in products]
    keyboard.append([InlineKeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è", url="https://t.me/mobilike_com")])
    await update.message.reply_text("üõí –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤:", reply_markup=InlineKeyboardMarkup(keyboard))

async def product_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    product = query.data.replace("product_", "")
    context.user_data["product"] = product

    keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_order")]]
    await query.edit_message_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {product}\n\n–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def cancel_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data.clear()
    await query.edit_message_text("‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω. –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ–π /start")

async def phone_received(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if "product" not in context.user_data:
        return

    product = context.user_data["product"]
    phone = update.message.text.strip()
    user = update.message.from_user

    execute_query(
        "INSERT INTO orders(user_id, username, product, phone) VALUES (%s, %s, %s, %s)",
        (str(user.id), user.username or "", product, phone)
    )

    keyboard = [[InlineKeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", url="https://t.me/mobilike_com")]]
    await update.message.reply_text(
        f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –Ω–∞ {product} –ø—Ä–∏–Ω—è—Ç!\nüìû –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –ø–æ –Ω–æ–º–µ—Ä—É: {phone}",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    await context.bot.send_message(
        chat_id=ADMIN_ID,
        text=f"üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\nüë§ @{user.username or user.id}\nüõí {product}\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}"
    )
    context.user_data.clear()

# ================== –ê–î–ú–ò–ù ==================
async def admin_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.from_user.id != ADMIN_ID:
        return

    keyboard = [
        [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤", callback_data="list_products")],
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="add_product")],
        [InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="remove_product")],
        [InlineKeyboardButton("üì¶ –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤", callback_data="list_orders")],
        [InlineKeyboardButton("üñº –ó–∞–≥—Ä—É–∑–∏—Ç—å –º–µ–¥–∏–∞", callback_data="set_media")],
    ]
    await update.message.reply_text("‚öôÔ∏è –ê–¥–º–∏–Ω-–º–µ–Ω—é:", reply_markup=InlineKeyboardMarkup(keyboard))

async def admin_menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == "list_products":
        products = get_products()
        text = "üìã –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤:\n" + "\n".join(f"‚Ä¢ {p}" for p in products) if products else "‚ö†Ô∏è –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç."
        await query.edit_message_text(text)

    elif data == "list_orders":
        orders = execute_query("SELECT id, username, product, phone FROM orders ORDER BY id DESC", fetch=True)
        if not orders:
            await query.edit_message_text("‚ö†Ô∏è –ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
            return

        text = "üì¶ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã:\n\n"
        keyboard = []
        for oid, username, product, phone in orders:
            text += f"üÜî {oid}\nüë§ @{username or '–ë–µ–∑ –Ω–∏–∫–∞'}\nüõí {product}\nüìû {phone}\n\n"
            keyboard.append([InlineKeyboardButton(f"üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑ {oid}", callback_data=f"delete_order_{oid}")])

        keyboard.append([InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="list_orders")])
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))

    elif data == "add_product":
        context.user_data["admin_mode"] = "add_product"
        await query.edit_message_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞:")

    elif data == "remove_product":
        products = get_products()
        if not products:
            await query.edit_message_text("‚ö†Ô∏è –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø—É—Å—Ç.")
            return
        keyboard = [[InlineKeyboardButton(f"üóë {p}", callback_data=f"delete_{p}")] for p in products]
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=InlineKeyboardMarkup(keyboard))

    elif data == "set_media":
        context.user_data["admin_mode"] = "set_media"
        await query.edit_message_text("üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ / –≥–∏—Ñ / –≤–∏–¥–µ–æ –¥–ª—è –∑–∞–≥–ª–∞–≤–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞:")

async def handle_media(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–º –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤"""
    if context.user_data.get("admin_mode") != "set_media":
        return

    file_id = None
    media_type = None

    if update.message.photo:
        file_id = update.message.photo[-1].file_id
        media_type = "photo"
    elif update.message.video:
        file_id = update.message.video.file_id
        media_type = "video"
    elif update.message.animation:
        file_id = update.message.animation.file_id
        media_type = "animation"

    if file_id:
        set_media(file_id)
        execute_query("""
        INSERT INTO settings(key, value)
        VALUES ('media_type', %s)
        ON CONFLICT (key) DO UPDATE SET value = EXCLUDED.value
        """, (media_type,))
        await update.message.reply_text("‚úÖ –ú–µ–¥–∏–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
    else:
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø —Ñ–∞–π–ª–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    context.user_data.pop("admin_mode", None)

async def delete_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    order_id = int(query.data.replace("delete_order_", ""))
    execute_query("DELETE FROM orders WHERE id = %s", (order_id,))
    await query.edit_message_text(f"‚úÖ –ó–∞–∫–∞–∑ ‚Ññ{order_id} —É–¥–∞–ª—ë–Ω.")

async def add_product_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get("admin_mode") == "add_product":
        name = update.message.text.strip()
        if not name:
            await update.message.reply_text("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
            return
        try:
            execute_query("INSERT INTO products(name) VALUES (%s)", (name,))
            await update.message.reply_text(f"‚úÖ –¢–æ–≤–∞—Ä ¬´{name}¬ª –¥–æ–±–∞–≤–ª–µ–Ω!")
        except IntegrityError:
            await update.message.reply_text("‚ùå –¢–∞–∫–æ–π —Ç–æ–≤–∞—Ä —É–∂–µ –µ—Å—Ç—å.")
        context.user_data.pop("admin_mode", None)

async def remove_product_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    product_name = query.data.replace("delete_", "")
    execute_query("DELETE FROM products WHERE name = %s", (product_name,))
    await query.edit_message_text(f"‚úÖ –¢–æ–≤–∞—Ä ¬´{product_name}¬ª —É–¥–∞–ª—ë–Ω.")

# ================== MAIN ==================
def main():
    init_db()
    print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ, —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã/—Å–æ–∑–¥–∞–Ω—ã.")

    app = Application.builder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(product_chosen, pattern="^product_"))
    app.add_handler(CallbackQueryHandler(cancel_order, pattern="^cancel_order$"))
    app.add_handler(CallbackQueryHandler(delete_order, pattern="^delete_order_.*$"))

    async def text_router(update: Update, context: ContextTypes.DEFAULT_TYPE):
        if context.user_data.get("admin_mode") == "add_product":
            await add_product_name(update, context)
        elif "product" in context.user_data:
            await phone_received(update, context)
        else:
            await update.message.reply_text("‚ö†Ô∏è –ù–µ–ø–æ–Ω—è—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –∏–ª–∏ /admin")

    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_router))
    app.add_handler(MessageHandler(filters.PHOTO | filters.VIDEO | filters.ANIMATION, handle_media))

    app.add_handler(CommandHandler("admin", admin_menu))
    app.add_handler(CallbackQueryHandler(admin_menu_handler, pattern="^(list_products|add_product|remove_product|list_orders|set_media)$"))
    app.add_handler(CallbackQueryHandler(remove_product_handler, pattern="^delete_.*$"))

    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –û–∂–∏–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—ã...")
    app.run_polling()

if __name__ == "__main__":
    main()

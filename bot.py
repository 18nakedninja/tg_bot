import os
import psycopg2
import asyncio
import signal
from psycopg2 import IntegrityError
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler,
    MessageHandler, filters, ContextTypes, ConversationHandler
)

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
BOT_TOKEN = "8342478210:AAFd3jAdENjgZ52FHmcm3jtDhkP4rpfOJLg"
ADMIN_ID = 472044641

HEADER_IMAGE = "header.jpg"
HEADER_VIDEO = "header.mp4"
HEADER_GIF = "header.gif"
CONTACT_LINK = "https://t.me/mobilike_com"

# === STATES ===
SELECT_PRODUCT, SELECT_QUANTITY, ADD_PRODUCT, REMOVE_PRODUCT, CONFIRM_CLEAR, WAIT_MEDIA = range(6)

# === –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ö POSTGRESQL ===
DATABASE_URL = os.environ.get("DATABASE_URL")
if not DATABASE_URL:
    raise ValueError("DATABASE_URL –Ω–µ –∑–∞–¥–∞–Ω–∞! –ü—Ä–æ–≤–µ—Ä—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞ Railway.")

conn = psycopg2.connect(DATABASE_URL)
cursor = conn.cursor()

# —Å–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
cursor.execute("""
CREATE TABLE IF NOT EXISTS products(
    id SERIAL PRIMARY KEY,
    name TEXT UNIQUE
)
""")
cursor.execute("""
CREATE TABLE IF NOT EXISTS orders(
    id SERIAL PRIMARY KEY,
    user_id TEXT,
    username TEXT,
    product TEXT,
    quantity TEXT
)
""")
conn.commit()

def get_products():
    cursor.execute("SELECT name FROM products ORDER BY id ASC")
    return [row[0] for row in cursor.fetchall()]

# === –ö–õ–ò–ï–ù–¢–°–ö–ê–Ø –ß–ê–°–¢–¨ ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if os.path.exists(HEADER_VIDEO):
        with open(HEADER_VIDEO, "rb") as v:
            await update.message.reply_video(v, caption="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:")
    elif os.path.exists(HEADER_GIF):
        with open(HEADER_GIF, "rb") as g:
            await update.message.reply_animation(g, caption="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:")
    elif os.path.exists(HEADER_IMAGE):
        with open(HEADER_IMAGE, "rb") as img:
            await update.message.reply_photo(img, caption="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:")
    else:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:")

    products = get_products()
    if not products:
        await update.message.reply_text("–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø—É—Å—Ç. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –µ–≥–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å.")
        return ConversationHandler.END

    keyboard = [[InlineKeyboardButton(p, callback_data=p)] for p in products]
    keyboard.append([InlineKeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è", url=CONTACT_LINK)])
    await update.message.reply_text("üõí –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤:", reply_markup=InlineKeyboardMarkup(keyboard))
    return SELECT_PRODUCT

async def product_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data["product"] = query.data
    await query.edit_message_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {query.data}\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:")
    return SELECT_QUANTITY

async def quantity_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE):
    product = context.user_data["product"]
    quantity = update.message.text
    user = update.message.from_user

    cursor.execute(
        "INSERT INTO orders(user_id, username, product, quantity) VALUES (%s, %s, %s, %s)",
        (str(user.id), user.username or "", product, quantity)
    )
    conn.commit()

    await update.message.reply_text(f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –Ω–∞ {quantity} √ó {product} –ø—Ä–∏–Ω—è—Ç!")
    admin_message = f"üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\nüë§ @{user.username or user.id}\nüõí {product}\nüî¢ –ö–æ–ª-–≤–æ: {quantity}"
    await context.bot.send_message(chat_id=ADMIN_ID, text=admin_message)
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END

# === –ê–î–ú–ò–ù-–ú–ï–ù–Æ ===
async def admin_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.from_user.id != ADMIN_ID:
        return
    products = get_products()
    keyboard = [
        [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤", callback_data="list_products")],
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="add_product")],
        [InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="remove_product")],
        [InlineKeyboardButton("üì¶ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã", callback_data="last_orders")],
        [InlineKeyboardButton("üßπ –û—á–∏—Å—Ç–∏—Ç—å –∑–∞–∫–∞–∑—ã", callback_data="clear_orders")],
        [InlineKeyboardButton("üñº –ó–∞–≥—Ä—É–∑–∏—Ç—å –æ–±–ª–æ–∂–∫—É", callback_data="upload_media")]
    ]
    await update.message.reply_text("‚öôÔ∏è –ê–¥–º–∏–Ω-–º–µ–Ω—é:", reply_markup=InlineKeyboardMarkup(keyboard))
    return ConversationHandler.END

async def admin_menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == "list_products":
        products = get_products()
        text = "üìã –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤:\n" + "\n".join(f"‚Ä¢ {p}" for p in products) if products else "‚ö†Ô∏è –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç."
        await query.edit_message_text(text)

    elif data == "add_product":
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞:")
        return ADD_PRODUCT

    elif data == "remove_product":
        products = get_products()
        if not products:
            await query.edit_message_text("‚ö†Ô∏è –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø—É—Å—Ç.")
            return ConversationHandler.END
        keyboard = [[InlineKeyboardButton(f"üóë {p}", callback_data=f"delete_{p}")] for p in products]
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=InlineKeyboardMarkup(keyboard))
        return REMOVE_PRODUCT

    elif data == "last_orders":
        cursor.execute("SELECT user_id, username, product, quantity FROM orders ORDER BY id DESC LIMIT 5")
        orders = cursor.fetchall()
        if not orders:
            await query.edit_message_text("üì¶ –ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
            return ConversationHandler.END
        text = "üì¶ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã:\n\n" + "".join(f"üë§ @{u[1] or u[0]}: {u[3]} √ó {u[2]}\n" for u in orders)
        await query.edit_message_text(text)

    elif data == "clear_orders":
        keyboard = [
            [InlineKeyboardButton("‚úÖ –î–∞, –æ—á–∏—Å—Ç–∏—Ç—å", callback_data="confirm_clear_yes")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="confirm_clear_no")]
        ]
        await query.edit_message_text("‚ö†Ô∏è –¢—ã —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã?", reply_markup=InlineKeyboardMarkup(keyboard))
        return CONFIRM_CLEAR

    elif data == "upload_media":
        await query.edit_message_text("üì∏ –ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ gif, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ–±–ª–æ–∂–∫–æ–π –ø—Ä–∏ /start.")
        return WAIT_MEDIA

# === –û–ë–†–ê–ë–û–¢–ö–ê –ú–ï–î–ò–ê ===
async def handle_media(update: Update, context: ContextTypes.DEFAULT_TYPE):
    file = None
    if update.message.photo:
        file = await update.message.photo[-1].get_file()
        filename = HEADER_IMAGE
    elif update.message.video:
        file = await update.message.video.get_file()
        filename = HEADER_VIDEO
    elif update.message.animation:
        file = await update.message.animation.get_file()
        filename = HEADER_GIF
    else:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ gif.")
        return WAIT_MEDIA

    await file.download_to_drive(filename)
    await update.message.reply_text("‚úÖ –û–±–ª–æ–∂–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –æ–Ω–∞ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –ø—Ä–∏ /start.")
    return ConversationHandler.END

# === –î–û–ë–ê–í–õ–ï–ù–ò–ï / –£–î–ê–õ–ï–ù–ò–ï –¢–û–í–ê–†–û–í ===
async def add_product_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    name = update.message.text.strip()
    if not name:
        await update.message.reply_text("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return ADD_PRODUCT
    try:
        cursor.execute("INSERT INTO products(name) VALUES (%s)", (name,))
        conn.commit()
        await update.message.reply_text(f"‚úÖ –¢–æ–≤–∞—Ä ¬´{name}¬ª –¥–æ–±–∞–≤–ª–µ–Ω!")
    except IntegrityError:
        conn.rollback()
        await update.message.reply_text("‚ùå –¢–∞–∫–æ–π —Ç–æ–≤–∞—Ä —É–∂–µ –µ—Å—Ç—å.")
    return ConversationHandler.END

async def remove_product_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    name = query.data.replace("delete_", "")
    cursor.execute("DELETE FROM products WHERE name=%s", (name,))
    conn.commit()
    await query.edit_message_text(f"üóë –¢–æ–≤–∞—Ä ¬´{name}¬ª —É–¥–∞–ª—ë–Ω.")
    return ConversationHandler.END

# === –ì–õ–û–ë–ê–õ–¨–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –û–®–ò–ë–û–ö ===
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    print(f"[ERROR] {context.error}")
    if update and hasattr(update, "effective_chat"):
        try:
            await update.effective_chat.send_message("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        except:
            pass

# === –ó–ê–ü–£–°–ö ===
async def main():
    app = Application.builder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start),
                      CommandHandler("admin", admin_menu)],
        states={
            SELECT_PRODUCT: [CallbackQueryHandler(product_chosen)],
            SELECT_QUANTITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, quantity_chosen)],
            ADD_PRODUCT: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_product_name)],
            REMOVE_PRODUCT: [CallbackQueryHandler(remove_product_handler, pattern="^delete_.*$")],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        per_chat=True,  # —è–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
    )

    app.add_handler(conv_handler)
    app.add_handler(
        CallbackQueryHandler(
            admin_menu_handler,
            pattern="^(list_products|add_product|remove_product|last_orders|clear_orders|upload_media)$"
        )
    )

    # –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã—Ö–æ–¥ –ø—Ä–∏ SIGTERM (Railway –º–æ–∂–µ—Ç –ø–æ—Å—ã–ª–∞—Ç—å)
    loop = asyncio.get_running_loop()
    stop_event = asyncio.Event()

    def handle_stop(*args):
        print("üì¢ –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...")
        stop_event.set()

    loop.add_signal_handler(signal.SIGTERM, handle_stop)
    loop.add_signal_handler(signal.SIGINT, handle_stop)

    async with app:
        await app.start()
        await app.updater.start_polling()
        await stop_event.wait()  # –∂–¥—ë–º —Å–∏–≥–Ω–∞–ª–∞ –æ—Ç Railway
        await app.updater.stop()
        await app.stop()

if __name__ == "__main__":
    asyncio.run(main())

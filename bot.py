import os
import psycopg2
from psycopg2 import IntegrityError
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler,
    MessageHandler, filters, ContextTypes, ConversationHandler
)

# ================= –ù–ê–°–¢–†–û–ô–ö–ò =================
# –í—Å—Ç–∞–≤—å —Å—é–¥–∞ —Ç–æ–∫–µ–Ω —Ç–≤–æ–µ–≥–æ –±–æ—Ç–∞
BOT_TOKEN = "8342478210:AAFd3jAdENjgZ52FHmcm3jtDhkP4rpfOJLg"

# –í—Å—Ç–∞–≤—å —Å—é–¥–∞ ID —Ç–µ–ª–µ–≥—Ä–∞–º–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (—á–∏—Å–ª–æ)
ADMIN_ID = 472044641  

# –§–∞–π–ª—ã –¥–ª—è –æ–±–ª–æ–∂–∫–∏ / —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –º–µ–¥–∏–∞
HEADER_IMAGE = "header.jpg"
HEADER_VIDEO = "header.mp4"
HEADER_GIF = "header.gif"
CONTACT_LINK = "https://t.me/mobilike_com"

# ================= –°–û–°–¢–û–Ø–ù–ò–Ø =================
SELECT_PRODUCT, SELECT_QUANTITY, ADD_PRODUCT, REMOVE_PRODUCT, EDIT_PRODUCT_NAME = range(5)

# ================= –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ö –ë–ê–ó–ï =================
DATABASE_URL = os.environ.get("DATABASE_URL")  # Railway –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω—ã–π URL

if not DATABASE_URL:
    raise ValueError("DATABASE_URL –Ω–µ –∑–∞–¥–∞–Ω! –ü—Ä–æ–≤–µ—Ä—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞ Railway.")

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
conn = psycopg2.connect(DATABASE_URL, sslmode='require')
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
cursor.execute("""
CREATE TABLE IF NOT EXISTS products(
    id SERIAL PRIMARY KEY,
    name TEXT UNIQUE NOT NULL
)
""")
cursor.execute("""
CREATE TABLE IF NOT EXISTS orders(
    id SERIAL PRIMARY KEY,
    user_id TEXT,
    username TEXT,
    product TEXT,
    quantity TEXT
)
""")
conn.commit()
print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ, —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã/—Å–æ–∑–¥–∞–Ω—ã.")

# ================= –§–£–ù–ö–¶–ò–ò =================
def get_products():
    cursor.execute("SELECT name FROM products ORDER BY id ASC")
    return [row[0] for row in cursor.fetchall()]

# ============== –ö–õ–ò–ï–ù–¢–°–ö–ê–Ø –ß–ê–°–¢–¨ =================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    if os.path.exists(HEADER_VIDEO):
        with open(HEADER_VIDEO, "rb") as v:
            await update.message.reply_video(v, caption="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:")
    elif os.path.exists(HEADER_GIF):
        with open(HEADER_GIF, "rb") as g:
            await update.message.reply_animation(g, caption="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:")
    elif os.path.exists(HEADER_IMAGE):
        with open(HEADER_IMAGE, "rb") as img:
            await update.message.reply_photo(img, caption="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:")
    else:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:")

    products = get_products()
    if not products:
        await update.message.reply_text("–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø—É—Å—Ç. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –µ–≥–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å.")
        return ConversationHandler.END

    keyboard = [[InlineKeyboardButton(p, callback_data=p)] for p in products]
    keyboard.append([InlineKeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è", url=CONTACT_LINK)])
    await update.message.reply_text("üõí –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤:", reply_markup=InlineKeyboardMarkup(keyboard))
    return SELECT_PRODUCT

async def product_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data["product"] = query.data
    await query.edit_message_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {query.data}\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:")
    return SELECT_QUANTITY

async def quantity_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE):
    product = context.user_data.get("product")
    quantity = update.message.text
    user = update.message.from_user

    cursor.execute(
        "INSERT INTO orders(user_id, username, product, quantity) VALUES (%s, %s, %s, %s)",
        (str(user.id), user.username or "", product, quantity)
    )
    conn.commit()

    await update.message.reply_text(f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –Ω–∞ {quantity} √ó {product} –ø—Ä–∏–Ω—è—Ç!")
    admin_message = f"üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\nüë§ @{user.username or user.id}\nüõí {product}\nüî¢ –ö–æ–ª-–≤–æ: {quantity}"
    await context.bot.send_message(chat_id=ADMIN_ID, text=admin_message)
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END

# ================== –ê–î–ú–ò–ù ==================
async def admin_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω
    if update.message.from_user.id != ADMIN_ID:
        return

    keyboard = [
        [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤", callback_data="list_products")],
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="add_product")],
        [InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="remove_product")],
    ]
    await update.message.reply_text("‚öôÔ∏è –ê–¥–º–∏–Ω-–º–µ–Ω—é:", reply_markup=InlineKeyboardMarkup(keyboard))

async def admin_menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == "list_products":
        products = get_products()
        text = "üìã –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤:\n" + "\n".join(f"‚Ä¢ {p}" for p in products) if products else "‚ö†Ô∏è –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç."
        await query.edit_message_text(text)

    elif data == "add_product":
        await query.edit_message_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞:")
        return ADD_PRODUCT

    elif data == "remove_product":
        products = get_products()
        if not products:
            await query.edit_message_text("‚ö†Ô∏è –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø—É—Å—Ç.")
            return ConversationHandler.END
        keyboard = [[InlineKeyboardButton(f"üóë {p}", callback_data=f"delete_{p}")] for p in products]
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=InlineKeyboardMarkup(keyboard))
        return REMOVE_PRODUCT

async def add_product_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    name = update.message.text.strip()
    if not name:
        await update.message.reply_text("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return ADD_PRODUCT
    try:
        cursor.execute("INSERT INTO products(name) VALUES (%s)", (name,))
        conn.commit()
        await update.message.reply_text(f"‚úÖ –¢–æ–≤–∞—Ä ¬´{name}¬ª –¥–æ–±–∞–≤–ª–µ–Ω!")
    except IntegrityError:
        conn.rollback()
        await update.message.reply_text("‚ùå –¢–∞–∫–æ–π —Ç–æ–≤–∞—Ä —É–∂–µ –µ—Å—Ç—å.")
    return ConversationHandler.END

async def remove_product_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    name = query.data.replace("delete_", "")
    cursor.execute("DELETE FROM products WHERE name=%s", (name,))
    conn.commit()
    await query.edit_message_text(f"üóë –¢–æ–≤–∞—Ä ¬´{name}¬ª —É–¥–∞–ª—ë–Ω.")
    return ConversationHandler.END

# ================== MAIN ==================
def main():
    app = Application.builder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler("start", start),
            CommandHandler("admin", admin_menu)
        ],
        states={
            SELECT_PRODUCT: [CallbackQueryHandler(product_chosen)],
            SELECT_QUANTITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, quantity_chosen)],
            ADD_PRODUCT: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_product_name)],
            REMOVE_PRODUCT: [CallbackQueryHandler(remove_product_handler, pattern="^delete_.*$")]
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        allow_reentry=True
    )

    app.add_handler(conv_handler)
    app.add_handler(CallbackQueryHandler(admin_menu_handler,
                                         pattern="^(list_products|add_product|remove_product)$"))

    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –û–∂–∏–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—ã...")
    app.run_polling()

if __name__ == "__main__":
    main()

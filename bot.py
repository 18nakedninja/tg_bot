import os
import psycopg2
from psycopg2 import IntegrityError
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler,
    MessageHandler, filters, ContextTypes, ConversationHandler
)

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
BOT_TOKEN = os.environ.get("BOT_TOKEN") or "8342478210:AAFd3jAdENjgZ52FHmcm3jtDhkP4rpfOJLg"
if not BOT_TOKEN:
    raise ValueError("‚ùå BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏ –µ–≥–æ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

ADMIN_ID = 472044641
CONTACT_LINK = "https://t.me/mobilike_com"

# === STATES ===
SELECT_PRODUCT = 0
SELECT_QUANTITY = 1
ADD_PRODUCT = 2
REMOVE_PRODUCT = 3
SELECT_PRODUCT_TO_EDIT = 4
EDIT_PRODUCT_NAME = 5

# === DATABASE HELPERS ===
DATABASE_URL = os.environ.get("DATABASE_URL")
if not DATABASE_URL:
    raise ValueError("‚ùå DATABASE_URL –Ω–µ –∑–∞–¥–∞–Ω–∞!")

def execute_query(query, params=None, fetch=False):
    conn = psycopg2.connect(DATABASE_URL)
    try:
        with conn.cursor() as cur:
            cur.execute(query, params)
            if fetch:
                return cur.fetchall()
        conn.commit()
    except Exception as e:
        conn.rollback()
        raise e
    finally:
        conn.close()

def get_products():
    rows = execute_query("SELECT name FROM products ORDER BY id ASC", fetch=True)
    return [r[0] for r in rows]

# === CREATE TABLES ===
execute_query("""
CREATE TABLE IF NOT EXISTS products(
    id SERIAL PRIMARY KEY,
    name TEXT UNIQUE
)
""")
execute_query("""
CREATE TABLE IF NOT EXISTS orders(
    id SERIAL PRIMARY KEY,
    user_id TEXT,
    username TEXT,
    product TEXT,
    quantity TEXT
)
""")

# === CLIENT SIDE ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    products = get_products()
    if not products:
        await update.message.reply_text("–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø—É—Å—Ç. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –µ–≥–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å.")
        return ConversationHandler.END
    keyboard = [[InlineKeyboardButton(p, callback_data=p)] for p in products]
    keyboard.append([InlineKeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è", url=CONTACT_LINK)])
    await update.message.reply_text("üõí –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤:", reply_markup=InlineKeyboardMarkup(keyboard))
    return SELECT_PRODUCT

async def product_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data["product"] = query.data
    await query.edit_message_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {query.data}\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:")
    return SELECT_QUANTITY

async def quantity_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE):
    product = context.user_data.get("product")
    quantity = update.message.text
    user = update.message.from_user

    try:
        execute_query(
            "INSERT INTO orders(user_id, username, product, quantity) VALUES (%s, %s, %s, %s)",
            (str(user.id), user.username or "", product, quantity)
        )
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ë–î: {e}")
        return ConversationHandler.END

    await update.message.reply_text(f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –Ω–∞ {quantity} √ó {product} –ø—Ä–∏–Ω—è—Ç!")
    await context.bot.send_message(chat_id=ADMIN_ID,
                                   text=f"üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\nüë§ @{user.username or user.id}\nüõí {product}\nüî¢ –ö–æ–ª-–≤–æ: {quantity}")
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END

# === ADMIN PANEL ===
async def show_admin_menu(update_or_query, context):
    keyboard = [
        [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤", callback_data="list_products")],
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="add_product")],
        [InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="remove_product")],
        [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä", callback_data="edit_product")],
        [InlineKeyboardButton("üì¶ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã", callback_data="last_orders")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")],
    ]
    text = "‚öôÔ∏è <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    if isinstance(update_or_query, Update):
        await update_or_query.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode="HTML")
    else:
        await update_or_query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode="HTML")

async def admin_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.from_user.id != ADMIN_ID:
        return ConversationHandler.END
    await show_admin_menu(update, context)
    return ConversationHandler.END

async def admin_menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == "list_products":
        products = get_products()
        text = "üìã –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤:\n" + "\n".join(f"‚Ä¢ {p}" for p in products) if products else "‚ö†Ô∏è –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç."
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]]
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))

    elif data == "add_product":
        await query.edit_message_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞:")
        return ADD_PRODUCT

    elif data == "remove_product":
        products = get_products()
        if not products:
            await query.edit_message_text("‚ö†Ô∏è –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø—É—Å—Ç.")
            return ConversationHandler.END
        keyboard = [[InlineKeyboardButton(f"üóë {p}", callback_data=f"delete_{p}")] for p in products]
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")])
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=InlineKeyboardMarkup(keyboard))
        return REMOVE_PRODUCT

    elif data == "edit_product":
        products = get_products()
        if not products:
            await query.edit_message_text("‚ö†Ô∏è –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø—É—Å—Ç.")
            return ConversationHandler.END
        keyboard = [[InlineKeyboardButton(f"‚úèÔ∏è {p}", callback_data=f"edit_{p}")] for p in products]
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")])
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=InlineKeyboardMarkup(keyboard))
        return SELECT_PRODUCT_TO_EDIT

    elif data == "last_orders":
        orders = execute_query("SELECT user_id, username, product, quantity FROM orders ORDER BY id DESC LIMIT 5", fetch=True)
        text = "üì¶ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã:\n\n" + "".join(f"üë§ @{u[1] or u[0]}: {u[3]} √ó {u[2]}\n" for u in orders) if orders else "üì¶ –ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç."
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]]
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))

    elif data == "stats":
        total_orders = execute_query("SELECT COUNT(*) FROM orders", fetch=True)[0][0]
        total_products = execute_query("SELECT COUNT(*) FROM products", fetch=True)[0][0]
        text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\nüì¶ –ó–∞–∫–∞–∑–æ–≤: {total_orders}\nüìã –¢–æ–≤–∞—Ä–æ–≤: {total_products}"
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]]
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))

    elif data == "admin_back":
        await show_admin_menu(query, context)

# === ADD / REMOVE / EDIT PRODUCT ===
async def add_product_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        name = update.message.text.strip()
        print(f"[DEBUG] add_product_name –≤—ã–∑–≤–∞–Ω, –ø–æ–ª—É—á–∏–ª–∏: {name}")  # –ª–æ–≥ –≤ –∫–æ–Ω—Å–æ–ª—å

        if not name:
            await update.message.reply_text("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
            return ADD_PRODUCT

        try:
            execute_query("INSERT INTO products(name) VALUES (%s)", (name,))
        except IntegrityError:
            await update.message.reply_text("‚ùå –¢–∞–∫–æ–π —Ç–æ–≤–∞—Ä —É–∂–µ –µ—Å—Ç—å.")
            return ADD_PRODUCT
        except Exception as db_error:
            print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: {db_error}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ë–î: {db_error}")
            return ADD_PRODUCT

        await update.message.reply_text(f"‚úÖ –¢–æ–≤–∞—Ä ¬´{name}¬ª –¥–æ–±–∞–≤–ª–µ–Ω!")
        await show_admin_menu(update, context)
        return ConversationHandler.END

    except Exception as e:
        print(f"[CRITICAL] add_product_name —É–ø–∞–ª: {e}")
        await update.message.reply_text(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return ConversationHandler.END

async def remove_product_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    name = query.data.replace("delete_", "")
    execute_query("DELETE FROM products WHERE name=%s", (name,))
    await query.edit_message_text(f"üóë –¢–æ–≤–∞—Ä ¬´{name}¬ª —É–¥–∞–ª—ë–Ω.")
    await show_admin_menu(update, context)
    return ConversationHandler.END

async def select_product_to_edit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data["edit_product"] = query.data.replace("edit_", "")
    await query.edit_message_text(f"‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –¥–ª—è —Ç–æ–≤–∞—Ä–∞ ¬´{context.user_data['edit_product']}¬ª:")
    return EDIT_PRODUCT_NAME

async def edit_product_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    new_name = update.message.text.strip()
    old_name = context.user_data.get("edit_product")
    if not old_name or not new_name:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è.")
        return EDIT_PRODUCT_NAME
    try:
        execute_query("UPDATE products SET name=%s WHERE name=%s", (new_name, old_name))
    except IntegrityError:
        await update.message.reply_text("‚ùå –¢–æ–≤–∞—Ä —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        return EDIT_PRODUCT_NAME
    await update.message.reply_text(f"‚úÖ –¢–æ–≤–∞—Ä ¬´{old_name}¬ª –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω –≤ ¬´{new_name}¬ª.")
    await show_admin_menu(update, context)
    return ConversationHandler.END

# === MAIN ===
def main():
    app = Application.builder().token(BOT_TOKEN).build()

conv_handler = ConversationHandler(
    entry_points=[CommandHandler("start", start),
                  CommandHandler("admin", admin_menu)],
    states={
        SELECT_PRODUCT: [CallbackQueryHandler(product_chosen)],
        SELECT_QUANTITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, quantity_chosen)],
        ADD_PRODUCT: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_product_name)],
        REMOVE_PRODUCT: [CallbackQueryHandler(remove_product_handler, pattern="^delete_.*$")],
        CONFIRM_CLEAR: [CallbackQueryHandler(confirm_clear_handler)],
        WAIT_MEDIA: [MessageHandler(filters.ALL, upload_media_handler)]
    },
    fallbacks=[CommandHandler("cancel", cancel)],
    allow_reentry=True,   # <-- –î–û–ë–ê–í–ò–õ, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ —Å–Ω–æ–≤–∞ –≤–æ–π—Ç–∏ –≤ add_product
    per_message=True      # <-- –°–ê–ú–û–ï –ì–õ–ê–í–ù–û–ï! –∏–Ω–∞—á–µ MessageHandler –Ω–µ –æ—Ç—Ä–∞–±–æ—Ç–∞–µ—Ç
)

    app.add_handler(conv_handler)
    app.add_handler(CallbackQueryHandler(admin_menu_handler,
                                         pattern="^(list_products|add_product|remove_product|edit_product|last_orders|stats|admin_back)$"))
    app.run_polling()

if __name__ == "__main__":
    main()

import json
import os
from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup
)
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler,
    MessageHandler, filters, ContextTypes, ConversationHandler
)

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
BOT_TOKEN = "743563203:AAHwP9ZkApgJc8BPBZpLMuvaJT_vNs1ja-s"  # <-- —Ç–æ–∫–µ–Ω –ø—Ä—è–º–æ –≤ –∫–æ–¥–µ
ADMIN_ID = 472044641  # <-- –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π Telegram user ID
PRODUCTS_FILE = "products.json"
ORDERS_FILE = "orders.txt"
HEADER_IMAGE = "header.jpg"
HEADER_VIDEO = "header.mp4"
HEADER_GIF = "header.gif"
CONTACT_LINK = "https://t.me/YourUsername"  # <-- —Å—é–¥–∞ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–≤–æ–π Telegram

def load_products():
    if os.path.exists(PRODUCTS_FILE):
        with open(PRODUCTS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return ["–¢–æ–≤–∞—Ä 1", "–¢–æ–≤–∞—Ä 2", "–¢–æ–≤–∞—Ä 3"]

def save_products(products):
    with open(PRODUCTS_FILE, "w", encoding="utf-8") as f:
        json.dump(products, f, ensure_ascii=False, indent=2)

PRODUCTS = load_products()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
SELECT_PRODUCT, SELECT_QUANTITY, ADD_PRODUCT, REMOVE_PRODUCT, CONFIRM_CLEAR, WAIT_MEDIA = range(6)

# === –ö–õ–ò–ï–ù–¢–°–ö–ê–Ø –ß–ê–°–¢–¨ ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–ª–æ–∂–∫—É, –µ—Å–ª–∏ –µ—Å—Ç—å
    if os.path.exists(HEADER_VIDEO):
        with open(HEADER_VIDEO, "rb") as v:
            await update.message.reply_video(v, caption="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:")
    elif os.path.exists(HEADER_GIF):
        with open(HEADER_GIF, "rb") as g:
            await update.message.reply_animation(g, caption="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:")
    elif os.path.exists(HEADER_IMAGE):
        with open(HEADER_IMAGE, "rb") as img:
            await update.message.reply_photo(img, caption="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:")
    else:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:")

    if not PRODUCTS:
        await update.message.reply_text("–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø—É—Å—Ç. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –µ–≥–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å.")
        return ConversationHandler.END

    keyboard = [[InlineKeyboardButton(p, callback_data=p)] for p in PRODUCTS]
    keyboard.append([InlineKeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è", url=CONTACT_LINK)])
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("üõí –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤:", reply_markup=reply_markup)
    return SELECT_PRODUCT

async def product_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data["product"] = query.data
    await query.edit_message_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {query.data}\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:")
    return SELECT_QUANTITY

async def quantity_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE):
    product = context.user_data["product"]
    quantity = update.message.text
    user = update.message.from_user

    with open(ORDERS_FILE, "a", encoding="utf-8") as f:
        f.write(f"{user.username or user.id} –∑–∞–∫–∞–∑–∞–ª {quantity} √ó {product}\n")

    await update.message.reply_text(f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –Ω–∞ {quantity} √ó {product} –ø—Ä–∏–Ω—è—Ç!")

    admin_message = f"üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\nüë§ @{user.username or user.id}\nüõí {product}\nüî¢ –ö–æ–ª-–≤–æ: {quantity}"
    await context.bot.send_message(chat_id=ADMIN_ID, text=admin_message)

    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END

# === –ê–î–ú–ò–ù-–ú–ï–ù–Æ ===
async def admin_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.from_user.id != ADMIN_ID:
        return
    keyboard = [
        [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤", callback_data="list_products")],
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="add_product")],
        [InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="remove_product")],
        [InlineKeyboardButton("üì¶ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã", callback_data="last_orders")],
        [InlineKeyboardButton("üßπ –û—á–∏—Å—Ç–∏—Ç—å –∑–∞–∫–∞–∑—ã", callback_data="clear_orders")],
        [InlineKeyboardButton("üñº –ó–∞–≥—Ä—É–∑–∏—Ç—å –æ–±–ª–æ–∂–∫—É", callback_data="upload_media")]
    ]
    await update.message.reply_text("‚öôÔ∏è –ê–¥–º–∏–Ω-–º–µ–Ω—é:", reply_markup=InlineKeyboardMarkup(keyboard))

async def admin_menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "list_products":
        text = "üìã –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤:\n" + "\n".join(f"‚Ä¢ {p}" for p in PRODUCTS) if PRODUCTS else "‚ö†Ô∏è –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç."
        await query.edit_message_text(text)

    elif query.data == "add_product":
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞:")
        return ADD_PRODUCT

    elif query.data == "remove_product":
        if not PRODUCTS:
            await query.edit_message_text("‚ö†Ô∏è –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø—É—Å—Ç.")
            return ConversationHandler.END
        keyboard = [[InlineKeyboardButton(f"üóë {p}", callback_data=f"delete_{p}")] for p in PRODUCTS]
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=InlineKeyboardMarkup(keyboard))
        return REMOVE_PRODUCT

    elif query.data == "last_orders":
        if not os.path.exists(ORDERS_FILE):
            await query.edit_message_text("üì¶ –ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
            return ConversationHandler.END
        with open(ORDERS_FILE, "r", encoding="utf-8") as f:
            orders = f.readlines()
        last_orders = orders[-5:] if len(orders) > 5 else orders
        text = "üì¶ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã:\n\n" + "".join(last_orders)
        await query.edit_message_text(text)

    elif query.data == "clear_orders":
        keyboard = [
            [InlineKeyboardButton("‚úÖ –î–∞, –æ—á–∏—Å—Ç–∏—Ç—å", callback_data="confirm_clear_yes")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="confirm_clear_no")]
        ]
        await query.edit_message_text("‚ö†Ô∏è –¢—ã —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã?", reply_markup=InlineKeyboardMarkup(keyboard))
        return CONFIRM_CLEAR

    elif query.data == "upload_media":
        await query.edit_message_text("üì∏ –ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ gif, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ–±–ª–æ–∂–∫–æ–π –ø—Ä–∏ /start.")
        return WAIT_MEDIA

async def clear_orders_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == "confirm_clear_yes":
        if os.path.exists(ORDERS_FILE):
            os.remove(ORDERS_FILE)
        await query.edit_message_text("üßπ –í—Å–µ –∑–∞–∫–∞–∑—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã.")
    else:
        await query.edit_message_text("‚ùå –û—á–∏—Å—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END

async def add_product_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    product_name = update.message.text
    PRODUCTS.append(product_name)
    save_products(PRODUCTS)
    await update.message.reply_text(f"‚úÖ –¢–æ–≤–∞—Ä ¬´{product_name}¬ª –¥–æ–±–∞–≤–ª–µ–Ω.")
    return ConversationHandler.END

async def remove_product_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    product_name = query.data.replace("delete_", "")
    if product_name in PRODUCTS:
        PRODUCTS.remove(product_name)
        save_products(PRODUCTS)
        await query.edit_message_text(f"üóë –¢–æ–≤–∞—Ä ¬´{product_name}¬ª —É–¥–∞–ª—ë–Ω.")
    else:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    return ConversationHandler.END

async def upload_media_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.video:
        file = await update.message.video.get_file()
        await file.download_to_drive(HEADER_VIDEO)
        if os.path.exists(HEADER_IMAGE): os.remove(HEADER_IMAGE)
        if os.path.exists(HEADER_GIF): os.remove(HEADER_GIF)
        await update.message.reply_text("‚úÖ –í–∏–¥–µ–æ –æ–±–ª–æ–∂–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
    elif update.message.animation:
        file = await update.message.animation.get_file()
        await file.download_to_drive(HEADER_GIF)
        if os.path.exists(HEADER_IMAGE): os.remove(HEADER_IMAGE)
        if os.path.exists(HEADER_VIDEO): os.remove(HEADER_VIDEO)
        await update.message.reply_text("‚úÖ GIF –æ–±–ª–æ–∂–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
    elif update.message.photo:
        file = await update.message.photo[-1].get_file()
        await file.download_to_drive(HEADER_IMAGE)
        if os.path.exists(HEADER_VIDEO): os.remove(HEADER_VIDEO)
        if os.path.exists(HEADER_GIF): os.remove(HEADER_GIF)
        await update.message.reply_text("‚úÖ –ö–∞—Ä—Ç–∏–Ω–∫–∞ –æ–±–ª–æ–∂–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
    else:
        await update.message.reply_text("‚ùå –≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ gif. –ü—Ä–∏—à–ª–∏ –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª.")
        return WAIT_MEDIA
    return ConversationHandler.END

def main():
    app = Application.builder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            SELECT_PRODUCT: [CallbackQueryHandler(product_chosen)],
            SELECT_QUANTITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, quantity_chosen)],
            ADD_PRODUCT: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_product_name)],
            REMOVE_PRODUCT: [CallbackQueryHandler(remove_product_handler)],
            CONFIRM_CLEAR: [CallbackQueryHandler(clear_orders_confirm)],
            WAIT_MEDIA: [MessageHandler(filters.ALL, upload_media_handler)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(conv_handler)
    app.add_handler(CommandHandler("admin", admin_menu))
    app.add_handler(CallbackQueryHandler(admin_menu_handler,
                                         pattern="^(list_products|add_product|remove_product|last_orders|clear_orders|upload_media)$"))

    async def setup():
        await app.bot.set_my_commands([
            ("start", "–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑"),
            ("cancel", "–û—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ"),
            ("admin", "–ê–¥–º–∏–Ω-–º–µ–Ω—é"),
        ])

    async def run():
        await setup()
        await app.initialize()
        await app.start()
        await app.updater.start_polling()
        await app.updater.idle()

    import asyncio
    asyncio.run(run())

if __name__ == "__main__":
    main()
